{"version":3,"sources":["components/Header.js","components/News.js","App.js","serviceWorker.js","index.js"],"names":["Header","className","News","title","image","description","date","link","CardDeck","Card","Img","variant","src","Body","Title","Text","href","target","Footer","App","useState","news","setNews","search","setSearch","query","setQuery","useEffect","getNews","a","fetch","response","json","data","articles","console","log","onSubmit","e","preventDefault","type","placeholder","value","onChange","map","item","urlToImage","key","publishedAt","url","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"8QAWeA,G,YARA,WACX,OACE,yBAAKC,UAAU,UACjB,2C,eCoBaC,EArBJ,SAAC,GAA6C,IAA5CC,EAA2C,EAA3CA,MAAOC,EAAoC,EAApCA,MAAOC,EAA6B,EAA7BA,YAAaC,EAAgB,EAAhBA,KAAMC,EAAU,EAAVA,KAC5C,OAEC,kBAACC,EAAA,EAAD,KACH,kBAACC,EAAA,EAAD,KACE,kBAACA,EAAA,EAAKC,IAAN,CAAUC,QAAQ,MAAMC,IAAKR,IAC7B,kBAACK,EAAA,EAAKI,KAAN,KACE,kBAACJ,EAAA,EAAKK,MAAN,KAAaX,GACb,kBAACM,EAAA,EAAKM,KAAN,KACCV,EADD,IACc,4BAAI,uBAAGW,KAAMT,EAAMU,OAAQ,UAAvB,oBAGpB,kBAACR,EAAA,EAAKS,OAAN,KACA,2BAAOjB,UAAU,cAAjB,gBAA4CK,OC2DjCa,EAtEH,WAEV,IAFgB,EAKQC,mBAAS,IALjB,mBAKTC,EALS,KAKHC,EALG,OAMYF,mBAAS,IANrB,mBAMTG,EANS,KAMDC,EANC,OAOUJ,mBAAS,IAPnB,mBAOTK,EAPS,KAOFC,EAPE,KAUlBC,qBAAU,WACRC,MACE,CAACH,IAKL,IAAMG,EAAO,uCAAG,8BAAAC,EAAA,sEACSC,MAAM,uCAAD,OAAwCL,EAAxC,qCAhBZ,qCAeF,cACRM,EADQ,gBAEKA,EAASC,OAFd,OAERC,EAFQ,OAGdX,EAAQW,EAAKC,UACbC,QAAQC,IAAIH,GAJE,2CAAH,qDAoBX,OACE,yBAAKhC,UAAU,OACf,kBAAC,EAAD,MAEA,0BAAMA,UAAY,cAAcoC,SAVnB,SAAAC,GACfA,EAAEC,iBACFb,EAASH,GACTC,EAAU,MAQR,2BAAOgB,KAAO,OACPvC,UAAY,aACZwC,YAAc,qBACdC,MAASnB,EACToB,SApBU,SAAAL,GACnBd,EAAUc,EAAErB,OAAOyB,UAoBjB,4BAAQF,KAAO,SAASvC,UAAY,iBAApC,WAEA,yBAAKA,UAAU,wBACjB,yBAAKA,UAAU,OACZoB,GAAQA,EAAKuB,KAAI,SAAAC,GAAI,OACrB,yBAAK5C,UAAU,YACd,kBAAC,EAAD,CAAME,MAAO0C,EAAK1C,MACZC,MAAOyC,EAAKC,WACZzC,YAAawC,EAAKxC,YAClB0C,IAAKF,EAAK1C,MACVG,KAAMuC,EAAKG,YACXzC,KAAOsC,EAAKI,cCrDJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.d30d0a83.chunk.js","sourcesContent":["import React from 'react';\r\n\r\n\r\nconst Header = () => {\r\n    return(\r\n      <div className=\"header\">        \r\n    <h1>FindNEWS</h1>\r\n         \r\n      </div>   \r\n    )}\r\n\r\nexport default Header","import React from 'react';\r\nimport Card from 'react-bootstrap/Card'\r\nimport CardDeck from 'react-bootstrap/CardDeck'\r\n\r\n\r\nconst News = ({title, image, description, date, link}) => {\r\n    return(\r\n      \r\n     <CardDeck>\r\n  <Card>\r\n    <Card.Img variant=\"top\" src={image} />\r\n    <Card.Body>\r\n      <Card.Title>{title}</Card.Title>\r\n      <Card.Text>\r\n      {description} <em><a href={link} target =\"_blank\"> Read more...</a></em>\r\n      </Card.Text>\r\n    </Card.Body>\r\n    <Card.Footer>\r\n    <small className=\"text-muted\">Publibhed at:{date}</small>\r\n    </Card.Footer>\r\n  </Card>\r\n</CardDeck>\r\n\r\n    )\r\n  }\r\n\r\n  export default News\r\n\r\n","import React,{useEffect, useState} from 'react';\nimport './App.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport Header from './components/Header';\nimport News from './components/News';\n\n\nconst App = () => {\n \n  const API_KEY = '76e1ad147bbc465c98e03c376b7c62eb'\n\n  //STATES\n  const [news, setNews] = useState([])\n  const [search, setSearch] = useState('')\n  const [query, setQuery] = useState('')\n\n  //USE EFFECT\nuseEffect(() => {\n  getNews()\n }, [query])\n \n\n//FETCH\n\nconst getNews = async () => {\n  const response = await fetch(`https://newsapi.org/v2/everything?q=${query}&sortBy=popularity&apiKey=${API_KEY}`)\n  const data = await response.json()\n  setNews(data.articles);\n  console.log(data);\n\n}\n\n//get the value inputted by user in the search input\nconst updateSearch = e => {\n  setSearch(e.target.value)\n}\n\n//get the final query which only runs onSubmit\nconst getQuery = e =>{\n  e.preventDefault()\n  setQuery(search)\n  setSearch('')\n}\n\n  return (\n    <div className=\"App\">\n    <Header />\n\n    <form className = \"search-form\" onSubmit = {getQuery}>\n    <input type = \"text\"\n           className = \"search-bar\"\n           placeholder = \"Search for news...\"\n           value = {search}\n           onChange ={updateSearch}   />\n    <button type = \"submit\" className = \"search-button\">Search</button>\n    </form>\n    <div className=\"container news-cards\">\n  <div className=\"row\">\n   { news && news.map(item => (\n     <div className=\"col-md-4\">\n      <News title={item.title} \n            image={item.urlToImage} \n            description={item.description} \n            key={item.title} // unique key\n            date={item.publishedAt}\n            link= {item.url} />\n      </div>\n    \n            )\n            )}\n    </div>\n    </div>\n    \n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}